<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx  
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:annotation-config/>

    <!-- 使用annotation 自动注册bean, 并保证@Required, @Autowired的属性被注入 -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <context:component-scan base-package="cn.hackcoder"/>

    <bean id="property"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- classpath代表类路径,如src下面的文件 -->
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据源 -->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="filters" value="stat,log4j"/>

        <property name="url" value="${mysql.connection.url}"/>
        <property name="username" value="${mysql.connection.username}"/>
        <property name="password" value="${mysql.connection.password}"/>
        <property name="driverClassName" value="${mysql.driverClassName}"/>

        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="5"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="defaultAutoCommit" value="true"/>
    </bean>

    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation">
            <value>classpath:mybatis-config/sqlmap-config.xml</value>
        </property>
        <property name="mapperLocations">
            <value>classpath:mybatis-config/*-mapper.xml</value>
        </property>
    </bean>

    <!--
    关于mybatis-spring的配置说明 :
        SqlSessionTemplate 这个需要写配置文件，在实现类中注入sqlsession，再使用sqlsession，是细颗粒控制
        SqlSessionDaoSupport 这个只需要在实现类中继承特殊类就可以使用sqlsession
        MapperFactoryBean 这个要写配置文件，把对应的所有接口在配置文件中引用即可，无需写实现类
        MapperScannerConfigurer 这个要写配置文件，只要给出接口所在的包即可，会自动把包中的接口引入，无需写实现类

    自动扫描mapper接口,注入sqlsessionfactory -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.hackcoder.mapper"/>
    </bean>

    <!-- 开启 mybatis事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置aspect切面类 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>

    <!-- 配置事务切面Bean,指定事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 用于配置详细的事务语义 -->
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <!-- 其他方法使用默认的事务设置 -->
            <tx:method name="*" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- task定时任务 -->
    <task:annotation-driven/>
    <!-- 事务aop -->
    <aop:config>
        <!-- Service层切入点配置 -->
        <aop:pointcut id="servicePointCut"
                      expression="execution(* cn.hackcoder.service..impl.*ServiceImpl.*(..))"/>
        <!-- Service层事务配置 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointCut" order="1"/>
    </aop:config>

    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:config.properties</value>
            </list>
        </property>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>

</beans>
